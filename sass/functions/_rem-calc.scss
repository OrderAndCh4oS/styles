/**
 * It strips the unit of measure and returns it
 *
 * @mixin
 * @section Calculations Mixins
 * @param $num a unit in px or em
 * @example
 *  @include strip-unit(21px);
 *  @include strip-unit(2em);
 */
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

/**
 * Converts "px" to "em" using the ($)em-base
 *
 * @mixin
 * @section Calculations Mixins
 * @param $value a unit in px or em
 * @example
 *  @include convert-to-rem(21px);
 *  @include convert-to-rem(2em);
 */
@function convert-to-rem($value) {
  $value: strip-unit($value) / strip-unit($em-base) * 1rem;
  @if ($value == 0em) {
    $value: 0;
  }
  // Turn 0em into 0
  @return $value;
}

/**
 * Working in ems is annoying. Think in pixels by using this handy function, remCalc(#)
 * Just enter the number, no need to mention "px"

 * @mixin
 * @section Calculations Mixins
 * @param $values a list unit values
 * @example
 *  @include rem-calc(21px);
 *  @include rem-calc(2em);
 */
@function rem-calc($values...) {
  $max: length($values);
  // Get the total number of parameters passed

  // If there is only 1 parameter, then return it as an integer.
  // This is done because a list can't be multiplied or divided even if it contains a single value
  @if $max == 1 {
    @return convert-to-rem(nth($values, 1));
  }

  $emValues: ();
  // This will eventually store the converted $values in a list
  @for $i from 1 through $max {
    $emValues: append($emValues, convert-to-rem(nth($values, $i)));
  }
  @return $emValues;
}
